<?php

namespace Blueways\BwBookingmanager\ContextMenu;

use Blueways\BwBookingmanager\Domain\Repository\CalendarRepository;
use TYPO3\CMS\Backend\ContextMenu\ItemProviders\AbstractProvider;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Object\ObjectManager;

class CalendarItemProvider extends AbstractProvider
{

    protected $calendars;

    protected $itemsConfiguration = [
        'newEntry' => [
            'type' => 'item',
            'label' => 'LLL:EXT:bw_bookingmanager/Resources/Private/Language/locallang_be.xlf:context.newEntry',
            'iconIdentifier' => 'ext-bwbookingmanager-type-entry',
            'callbackAction' => 'newEntry'
        ],
        'newTimeslot' => [
            'type' => 'item',
            'label' => 'LLL:EXT:bw_bookingmanager/Resources/Private/Language/locallang_be.xlf:context.newTimeslot',
            'iconIdentifier' => 'ext-bwbookingmanager-type-timeslot',
            'callbackAction' => 'newTimeslot'
        ],
        'newBlockslot' => [
            'type' => 'item',
            'label' => 'LLL:EXT:bw_bookingmanager/Resources/Private/Language/locallang_be.xlf:context.newBlockslot',
            'iconIdentifier' => 'ext-bwbookingmanager-type-blockslot',
            'callbackAction' => 'newBlockslot'
        ],
        'newHoliday' => [
            'type' => 'item',
            'label' => 'LLL:EXT:bw_bookingmanager/Resources/Private/Language/locallang_be.xlf:context.newHoliday',
            'iconIdentifier' => 'ext-bwbookingmanager-type-holiday',
            'callbackAction' => 'newHoliday'
        ]
    ];

    public function __construct(string $table, string $identifier, string $context = '')
    {
        parent::__construct($table, $identifier, $context);

        $objectManager = GeneralUtility::makeInstance(ObjectManager::class);
        /** @var CalendarRepository $calendarRepository */
        $calendarRepository = $objectManager->get(CalendarRepository::class);
        $this->calendars = $calendarRepository->findAllByPid($identifier);
    }

    /**
     * Checks if this provider may be called to provide the list of context menu items for given table.
     *
     * @return bool
     */
    public function canHandle(): bool
    {
        return $this->table === 'tx_bwbookingmanager_domain_model_calendar' && $this->context === 'calendar';
    }

    /**
     * Returns the provider priority which is used for determining the order in which providers are processing items
     * to the result array. Highest priority means provider is evaluated first.
     * This item provider should be called after PageProvider which has priority 100.
     * BEWARE: Returned priority should logically not clash with another provider.
     *         Please check @return int
     *
     * @see \TYPO3\CMS\Backend\ContextMenu\ContextMenu::getAvailableProviders() if needed.
     */
    public function getPriority(): int
    {
        return 90;
    }

    /**
     * This method adds custom item to list of items generated by item providers with higher priority value (PageProvider)
     * You could also modify existing items here.
     * The new item is added after the 'info' item.
     *
     * @param array $items
     * @return array
     */
    public function addItems(array $items): array
    {
        $this->initDisabledItems();
        $localItems = $this->prepareItems($this->itemsConfiguration);
        $items = array_merge($items, $localItems);

        return $items;
    }

    /**
     * Registers the additional JavaScript RequireJS callback-module which will allow to display a notification
     * whenever the user tries to click on the "Hello World" item.
     * The method is called from AbstractProvider::prepareItems() for each context menu item.
     *
     * @param string $itemName
     * @return array
     */
    protected function getAdditionalAttributes(string $itemName): array
    {
        $itemTableMapping = [
            'newEntry' => 'tx_bwbookingmanager_domain_model_entry',
            'newTimeslot' => 'tx_bwbookingmanager_domain_model_timeslot',
            'newHoliday' => 'tx_bwbookingmanager_domain_model_holiday',
            'newBlockslot' => 'tx_bwbookingmanager_domain_model_blockslot'
        ];

        // for entry creation in direct booking calendar use default start and end time
        $calendar = $itemName === 'newEntry' ? $this->getFirstDirectBookingCalendar() : $this->calendars->getFirst();
        $calendarUid = $calendar->getUid();
        $calendarStartTime = $itemName === 'newEntry' ? $calendar->getDefaultStartTime() : 0;
        $calendarEndTime = $itemName === 'newEntry' ? $calendar->getDefaultEndTime() : 0;

        return [
            'data-callback-module' => 'TYPO3/CMS/BwBookingmanager/BackendCalendarContextMenuActions',
            'data-model-name' => $itemTableMapping[$itemName],
            'data-def-calendar-uid' => $calendarUid,
            'data-def-calendar-start-time' => $calendarStartTime,
            'data-def-calendar-end-time' => $calendarEndTime
        ];
    }

    /**
     * This method is called for each item this provider adds and checks if given item can be added
     *
     * @param string $itemName
     * @param string $type
     * @return bool
     */
    protected function canRender(string $itemName, string $type): bool
    {
        // checking if item is disabled through TSConfig
        if (in_array($itemName, $this->disabledItems, true)) {
            return false;
        }

        // check if new entry option should be available
        if ($itemName === 'newEntry') {
            return $this->hasDirectBookingCalendarAvailable();
        }

        return true;
    }

    protected function hasDirectBookingCalendarAvailable(): bool
    {
        return $this->getFirstDirectBookingCalendar() !== null;
    }

    public function getFirstDirectBookingCalendar()
    {
        foreach ($this->calendars as $calendar) {
            if ($calendar->isDirectBooking()) {
                return $calendar;
            }
        }
        return null;
    }
}
